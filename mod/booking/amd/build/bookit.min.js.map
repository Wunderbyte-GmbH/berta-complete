{"version":3,"file":"bookit.min.js","sources":["../src/bookit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookit\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\n\nimport {closeModal, closeInline} from 'mod_booking/bookingpage/prepageFooter';\n\nvar currentbookitpage = {};\nvar totalbookitpages = {};\n\nexport var SELECTORS = {\n    MODALID: 'sbPrePageModal_',\n    INLINEID: 'sbPrePageInline_',\n    INMODALDIV: ' div.modalMainContent',\n    MODALHEADER: 'div.modalHeader',\n    MODALBUTTONAREA: 'div.modalButtonArea',\n    MODALFOOTER: 'div.modalFooter',\n    CONTINUEBUTTON: 'a.continue-button', // Don't want to find button right now.\n    BACKBUTTON: 'a.back-button', // Don't want to find button right now.\n    BOOKITBUTTON: 'div.booking-button-area.noprice',\n    INMODALBUTTON: 'div.in-modal-button',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/**\n * Initializes the bookit button for the normal bookit function.\n * @param {integer} itemid\n * @param {string} area\n */\nexport const initbookitbutton = (itemid, area) => {\n\n    const initselector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid]' +\n    '[data-area]';\n\n    if (!itemid || !area) {\n        const initbuttons = document.querySelectorAll(initselector);\n        initbuttons.forEach(button => {\n            const inititemid = button.dataset.itemid;\n            const initarea = button.dataset.area;\n            initbookitbutton(inititemid, initarea);\n        });\n        return;\n    }\n\n    const selector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid=\"' + itemid + '\"]' +\n    '[data-area=\"' + area + '\"]';\n\n    const buttons = document.querySelectorAll(selector);\n\n    if (!buttons) {\n        return;\n    }\n\n    // We support more than one booking button on the same page.\n    buttons.forEach(button => {\n\n        if (button.dataset.nojs) {\n            return;\n        }\n\n        // We don't run code on disabled buttons.\n        if (button.classList.contains('disabled')) {\n            return;\n        }\n\n        if (!button.dataset.initialized) {\n            button.dataset.initialized = 'true';\n\n            const userid = button.dataset.userid;\n\n            if (button.querySelector('[data-action=\"bookondetail\"]')) {\n                // eslint-disable-next-line no-console\n                console.log('bookondetail abort');\n                return;\n            }\n\n            button.addEventListener('click', (e) => {\n\n                // E.stopPropagation();\n\n                const data = button.dataset;\n\n                if (e.target.classList.contains('shopping-cart-cancel-button')) {\n\n                    import('local_shopping_cart/shistory')\n                    // eslint-disable-next-line promise/always-return\n                    .then(shoppingcart => {\n                        const confirmCancelModal = shoppingcart.confirmCancelModal;\n                        // Now you can use the specific function\n                        confirmCancelModal(button, 0);\n                    })\n                    .catch(err => {\n                        // Handle any errors, including if the module doesn't exist\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                    });\n\n\n                } else if (e.target.classList.contains('btn')) {\n                    bookit(itemid, area, userid, data);\n                }\n            });\n        }\n    });\n};\n\n/**\n *\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n * @param {object} data\n */\nexport function bookit(itemid, area, userid, data) {\n\n    // eslint-disable-next-line no-console\n    console.log('run bookit');\n\n    Ajax.call([{\n        methodname: \"mod_booking_bookit\",\n        args: {\n            'itemid': itemid,\n            'area': area,\n            'userid': userid,\n            'data': JSON.stringify(data),\n        },\n        done: function(res) {\n\n            var skipreload = false;\n\n            if (document.querySelector('.booking-elective-component')) {\n                window.location.reload();\n            }\n\n            const jsonarray = JSON.parse(res.json);\n\n            // We might have more than one template to render.\n            const templates = res.template.split(',');\n\n            // There might be more than one button area.\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\n                '[data-itemid=\\'' + itemid + '\\']' +\n                '[data-area=\\'' + area + '\\']');\n\n            const promises = [];\n\n            // We run through every button. and render the data.\n            buttons.forEach(button => {\n\n                // eslint-disable-next-line no-console\n                console.log('bookit values', button.dataset.nojs, res.status);\n                skipreload = true;\n                if (button.dataset.nojs == 1\n                    && res.status == 0) {\n                    // eslint-disable-next-line no-console\n                    console.log('bookit skip', button.dataset.nojs, res.status);\n                } else {\n                    // For every button, we need a new jsonarray.\n                    const arraytoreduce = [...jsonarray];\n                    if (res.status == 1) {\n                        skipreload = false;\n                    }\n                    templates.forEach(template => {\n\n                        const data = arraytoreduce.shift();\n\n                        const datatorender = data.data ?? data;\n\n                        const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\n\n                            Templates.replaceNode(button, html, js);\n\n                            return true;\n                        }).catch(ex => {\n                            Notification.addNotification({\n                                message: 'failed rendering ' + ex,\n                                type: \"danger\"\n                            });\n                        });\n\n                        promises.push(promise);\n                    });\n                }\n            });\n\n            Promise.all(promises).then(() => {\n\n                const backdrop = document.querySelector(SELECTORS.STATICBACKDROP);\n\n                if (area === 'subbooking') {\n                    skipreload = true;\n                } else {\n                    if (currentbookitpage[itemid] < totalbookitpages[itemid]) {\n                        skipreload = true;\n                    }\n                }\n\n                // eslint-disable-next-line no-console\n                console.log('skipreload', skipreload, currentbookitpage[itemid], totalbookitpages[itemid]);\n\n                if (!backdrop && !skipreload) {\n                    reloadAllTables();\n                }\n\n                // The actions on successful booking are executed elsewhere.\n                return true;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n        }\n    }]);\n}\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {integer} totalnumberofpages\n * @param {string} uniquid\n */\nexport const initprepagemodal = (optionid, userid, totalnumberofpages, uniquid) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initprepagemodal', optionid, userid, totalnumberofpages, uniquid);\n\n    if (!optionid || !uniquid || !totalnumberofpages) {\n\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID);\n\n        elements.forEach(element => {\n\n            if (!element.querySelector('[data-action=\"bookondetail\"]')) {\n                // eslint-disable-next-line no-console\n                console.log('bookondetail abort');\n                return;\n            }\n\n            optionid = element.dataset.optionid;\n            uniquid = element.dataset.uniquid;\n            userid = element.dataset.userid;\n            totalnumberofpages = element.dataset.pages;\n            if (optionid && uniquid) {\n                initprepagemodal(optionid, userid, totalnumberofpages, uniquid);\n            }\n        });\n        return;\n    }\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    // We need to get all prepage modals on this site. Make sure they are initialized.\n    respondToVisibility(optionid, userid, uniquid, totalnumberofpages, loadPreBookingPage);\n};\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {integer} totalnumberofpages\n * @param {string} uniquid\n */\nexport const initprepageinline = (optionid, userid, totalnumberofpages, uniquid) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initprepageinline', optionid, userid, totalnumberofpages, uniquid);\n\n    if (!optionid || !uniquid || !totalnumberofpages) {\n\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.INLINEID);\n\n        // eslint-disable-next-line no-console\n        console.log(elements);\n\n        elements.forEach(element => {\n            optionid = element.dataset.optionid;\n            uniquid = element.dataset.uniquid;\n            userid = element.dataset.userid;\n            totalnumberofpages = element.dataset.pages;\n            if (optionid && uniquid) {\n                initprepageinline(optionid, userid, totalnumberofpages, uniquid);\n            }\n        });\n        return;\n    }\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    // Retrieve the right button.\n    const buttons = document.querySelectorAll(\n        '[data-itemid=\"' + optionid + '\"]' +\n        '[data-area=\"option\"]'\n    );\n\n    // Add the click listener to the button.\n\n    buttons.forEach(button => {\n\n        if (button.dataset.initialized) {\n            return;\n        }\n\n        button.dataset.initialized = true;\n\n        // eslint-disable-next-line no-console\n        console.log('add listener to button', button, button.dataset.action);\n\n        if (button.querySelector('[data-action=\"bookondetail\"]')) {\n            // eslint-disable-next-line no-console\n            console.log('bookondetail abort');\n            return;\n        }\n\n        button.addEventListener('click', e => {\n\n            // eslint-disable-next-line no-console\n            console.log('e.target', e.target);\n\n            // Get the row element.\n            let rowcontainer = e.target.closest('.mod-booking-row');\n\n            const transferarea = !rowcontainer.lastElementChild.classList.contains('inlineprepagearea');\n            // We move the inlineprepagearea only if we need to.\n            if (transferarea) {\n                let inlinediv = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\n\n                rowcontainer.append(inlinediv.closest('.inlineprepagearea'));\n                // Inlinediv.remove();\n\n                // We need to get all prepage modals on this site. Make sure they are initialized.\n                loadPreBookingPage(optionid, userid, uniquid);\n            }\n        });\n    });\n};\n\n/**\n * React on visibility change.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {string} uniquid\n * @param {integer} totalnumberofpages\n * @param {function} callback\n */\nfunction respondToVisibility(optionid, userid, uniquid, totalnumberofpages, callback) {\n\n    let elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"_\" + uniquid + \"]\");\n\n    elements.forEach(element => {\n\n        if (!element || element.dataset.initialized == 'true') {\n            return;\n        }\n\n        element.dataset.initialized = true;\n\n        var observer = new MutationObserver(function() {\n\n            if (!isHidden(element)) {\n\n                // Because of the modal animation, \"isHIdden\" is also true on hiding modal.\n                if (element.classList.contains('show')) {\n\n                    // Todo: Make sure it's not triggered on close.\n                    callback(optionid, userid, uniquid, totalnumberofpages);\n                }\n            }\n        });\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (element !== null) {\n            if (!isHidden(element)) {\n                element = element.parentElement;\n            } else {\n                if (element.dataset.observed) {\n                    return;\n                }\n\n                observer.observe(element, {attributes: true});\n                element.dataset.observed = true;\n                return;\n            }\n        }\n        callback(optionid, userid, uniquid, totalnumberofpages);\n    });\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\nfunction isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n\n/**\n * Loads the (next) pre booking page.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {string} uniquid\n */\nexport const loadPreBookingPage = (\n    optionid, userid = 0, uniquid = '') => {\n\n    const element = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\n\n    if (element) {\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n    } else {\n        // eslint-disable-next-line no-console\n        console.error('didnt find element');\n    }\n\n    Ajax.call([{\n        methodname: \"mod_booking_allow_add_item_to_cart\",\n        args: {\n            'itemid': optionid,\n            'userid': userid,\n        },\n        done: function(response) {\n            // Will always be 1, if shopping cart is not installed!\n            if (response.success == 1\n                || response.success == 5 // Already booked, we need this for subbokings.\n                || response.success == 0 // Already in cart, we need this for subbokings.\n            ) {\n                Ajax.call([{\n                    methodname: \"mod_booking_load_pre_booking_page\",\n                    args: {\n                        optionid,\n                        userid,\n                        'pagenumber': currentbookitpage[optionid],\n                    },\n                    done: function(res) {\n                        // If we are on the last page, we reset it to 0.\n                        if (currentbookitpage[optionid] === totalbookitpages[optionid] - 1) {\n                            currentbookitpage[optionid] = 0;\n                        }\n\n                        const jsonobject = JSON.parse(res.json);\n\n                        // We support more than one template, they will be seperated by comma.\n                        // We have a data key in the json\n                        const templates = res.template.split(',');\n                        let dataarray = jsonobject;\n                        // Const buttontype = res.buttontype;\n\n                        renderTemplatesOnPage(templates, dataarray, element);\n                    },\n                    fail: function(err) {\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                    }\n                }]);\n            } else {\n\n                // eslint-disable-next-line no-console\n                console.log('closeModal');\n                closeModal(optionid, false);\n                closeInline(optionid, false);\n\n                // Make sure that the prepage modal is actually closed.\n\n                import('local_shopping_cart/cart')\n                    // eslint-disable-next-line promise/always-return\n                    .then(shoppingcart => {\n                        const addItemShowNotification = shoppingcart.addItemShowNotification;\n                        // Now you can use the specific function\n                        response.userid = userid;\n                        addItemShowNotification(response);\n                    })\n                    .catch(err => {\n                        // Handle any errors, including if the module doesn't exist\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                });\n            }\n\n            return true;\n        },\n        fail: function(err) {\n            // eslint-disable-next-line no-console\n            console.log(err);\n        }\n    }]);\n};\n\n/**\n *\n * @param {string} templates\n * @param {object} dataarray\n * @param {HTMLElement} element\n */\nasync function renderTemplatesOnPage(templates, dataarray, element) {\n\n    const modal = element.closest('.prepage-body');\n\n    // We need to pass the id of our element to the templates to render.\n    // If not, we might select the wrong modal or collapsible.\n    let elementid = modal.id;\n\n    if (!elementid) {\n        const parent = modal.closest('[id]');\n        elementid = parent.id;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(modal, elementid);\n\n    modal.querySelector(SELECTORS.MODALHEADER).innerHTML = '';\n    modal.querySelector(SELECTORS.INMODALDIV).innerHTML = '';\n    modal.querySelector(SELECTORS.MODALBUTTONAREA).innerHTML = '';\n    modal.querySelector(SELECTORS.MODALFOOTER).innerHTML = '';\n\n    templates.forEach(async template => {\n\n        const data = dataarray.shift();\n\n        let targetelement = element;\n\n        if (!data) {\n            return true;\n        }\n\n        data.data.elementid = elementid;\n\n        switch (template) {\n            case 'mod_booking/bookingpage/header':\n                targetelement = modal.querySelector(SELECTORS.MODALHEADER);\n                break;\n            case 'mod_booking/bookit_button':\n            case 'mod_booking/bookit_price':\n                targetelement = modal.querySelector(SELECTORS.MODALBUTTONAREA);\n                break;\n            case 'mod_booking/bookingpage/footer':\n                targetelement = modal.querySelector(SELECTORS.MODALFOOTER);\n                break;\n            default:\n                targetelement = modal.querySelector(SELECTORS.INMODALDIV);\n                break;\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(data.data);\n\n        await Templates.renderForPromise(template, data.data).then(({html, js}) => {\n\n            Templates.replaceNodeContents(targetelement, html, js);\n\n            return true;\n        }).catch(ex => {\n            Notification.addNotification({\n                message: 'failed rendering ' + JSON.stringify(ex),\n                type: \"danger\"\n            });\n        });\n        return true;\n    });\n    return true;\n}\n\n/**\n * We want to find out the visible modal\n * @param {integer} optionid\n * @param {string} uniquid\n * @param {string} appendedSelector\n * @returns {HTMLElement}\n */\nfunction returnVisibleElement(optionid, uniquid, appendedSelector) {\n\n    // First, we get all the possbile Elements (we don't now the unique id appended to the element.)\n    let selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_' + uniquid + '\"] ' + appendedSelector;\n    if (!uniquid || uniquid.length === 0) {\n        selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"].show ' + appendedSelector;\n    }\n\n    let elements = document.querySelectorAll(selector);\n\n    // If the nodelist is empty, we we mgiht use inline.\n    // If so, we need to have a different way of selecting elements.\n    if (elements.length === 0) {\n\n        selector = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"] ' + appendedSelector;\n        elements = document.querySelectorAll(selector);\n\n    }\n\n    let visibleElement = null;\n\n    elements.forEach(element => {\n\n        var elementtocheck = element.parentElement.parentElement;\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (elementtocheck !== null) {\n            if (!isHidden(elementtocheck)) {\n                elementtocheck = elementtocheck.parentElement;\n\n            } else {\n\n                break;\n            }\n        }\n        // If after the while, we have still an element, it's hidden.\n        // So we only apply visible if it's null.\n        if (!elementtocheck) {\n            visibleElement = element;\n        }\n    });\n\n    return visibleElement;\n}\n\n/**\n * Load next prepage booking page.\n * @param {int} optionid\n * @param {int} userid\n */\nexport function continueToNextPage(optionid, userid) {\n\n    // eslint-disable-next-line no-console\n    console.log('continueToNextPage', optionid, userid, currentbookitpage[optionid], totalbookitpages[optionid]);\n    if (currentbookitpage[optionid] < totalbookitpages[optionid]) {\n        currentbookitpage[optionid]++;\n        loadPreBookingPage(optionid, userid);\n    }\n}\n\n/**\n *  Load previous prepage booking page.\n * @param {int} optionid\n * @param {int} userid\n */\nexport function backToPreviousPage(optionid, userid) {\n\n    currentbookitpage[optionid]--;\n\n    loadPreBookingPage(optionid, userid);\n}\n\n/**\n *  Set back variables used in modal.\n *  @param {int} optionid\n */\nexport function setBackModalVariables(optionid) {\n\n    currentbookitpage[optionid] = 0;\n}\n"],"names":["optionid","userid","currentbookitpage","loadPreBookingPage","console","log","totalbookitpages","SELECTORS","MODALID","INLINEID","INMODALDIV","MODALHEADER","MODALBUTTONAREA","MODALFOOTER","CONTINUEBUTTON","BACKBUTTON","BOOKITBUTTON","INMODALBUTTON","STATICBACKDROP","initbookitbutton","itemid","area","initselector","document","querySelectorAll","forEach","button","inititemid","dataset","initarea","selector","buttons","nojs","classList","contains","initialized","querySelector","addEventListener","e","data","target","then","shoppingcart","confirmCancelModal","catch","err","bookit","call","methodname","args","JSON","stringify","done","res","skipreload","window","location","reload","jsonarray","parse","json","templates","template","split","promises","status","arraytoreduce","shift","datatorender","promise","Templates","renderForPromise","_ref","html","js","replaceNode","ex","addNotification","message","type","push","Promise","all","backdrop","initprepagemodal","totalnumberofpages","uniquid","callback","element","observer","MutationObserver","isHidden","observed","observe","attributes","parentElement","respondToVisibility","pages","initprepageinline","elements","action","rowcontainer","closest","lastElementChild","inlinediv","returnVisibleElement","append","el","style","getComputedStyle","display","visibility","firstChild","removeChild","error","response","success","jsonobject","renderTemplatesOnPage","fail","addItemShowNotification","dataarray","modal","elementid","id","parent","innerHTML","async","targetelement","_ref2","replaceNodeContents","appendedSelector","length","visibleElement","elementtocheck"],"mappings":"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"}